'use strict';

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
class ClientBase {
    transformOptions(options) {
        options.credentials = "include";
        return Promise.resolve(options);
    }
    transformResult(url, response, processor) {
        return processor(response);
    }
}
class WeatherForecastClient extends ClientBase {
    http;
    baseUrl;
    jsonParseReviver = undefined;
    constructor(baseUrl, http) {
        super();
        this.http = http ? http : window;
        this.baseUrl = baseUrl ?? "";
    }
    get() {
        let url_ = this.baseUrl + "/weatherforecast";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGet(_response));
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                result200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
function jsonParse(json, reviver) {
    json = JSON.parse(json, reviver);
    var byid = {};
    var refs = [];
    json = (function recurse(obj, prop, parent) {
        if (typeof obj !== 'object' || !obj)
            return obj;
        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        }
        else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }
        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        }
        else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }
        return obj;
    })(json);
    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }
    return json;
}
class ApiException extends Error {
    message;
    status;
    response;
    headers;
    result;
    constructor(message, status, response, headers, result) {
        super();
        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }
    isApiException = true;
    static isApiException(obj) {
        return obj.isApiException === true;
    }
}
function throwException(message, status, response, headers, result) {
    throw new ApiException(message, status, response, headers, null);
}

exports.Theme = void 0;
(function (Theme) {
    Theme[Theme["Light"] = 0] = "Light";
    Theme[Theme["Dark"] = 1] = "Dark";
    Theme[Theme["OperatingSystem"] = 2] = "OperatingSystem";
})(exports.Theme || (exports.Theme = {}));

exports.ApiException = ApiException;
exports.ClientBase = ClientBase;
exports.WeatherForecastClient = WeatherForecastClient;
//# sourceMappingURL=index.cjs.map
